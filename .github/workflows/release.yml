run-name: new release ðŸš€
on:
  push:
    paths: 
    - '.github/ver.env'


name: Upload Release Asset

jobs:
  build-and-release:
    name: Package ABST on Windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        shell: powershell
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module ps2exe
          pip install  PyQt5 pyqt5-tools  pyinstaller 
      - name: version #add env var # This would actually build your project, using zip for an example artifact
        shell: powershell
        run: |
          cat .github/ver.env >> $env:GITHUB_ENV
      - name: prepare release archive
        shell: powershell
        run: |
          $PSVersionTable
          pip --version
          ./local_release.ps1 -opath ABST_${env:VER}
          echo ${env:VER}
          echo $VER 
          echo "---------------"
          ls
          echo "############################################################---------------"
          Compress-Archive -LiteralPath ABST_${env:VER}  -DestinationPath ./ABST_${env:VER}.zip
          ls
      - name: create 7z release
        uses: edgarrc/action-7z@v1
        with:
          args: 7z a -t7z -mx=9 ./ABST_${env:VER}.7z ./ABST_${env:VER}/
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{env.VER}}
          release_name: Release ${{env.VER}}
          draft: true
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./ABST_${{env.VER}}.zip
          asset_name: ABST_${{env.VER}}.zip
          asset_content_type: application/zip
      - name: Upload Release Asset 7z
        id: upload-release-asset-7z 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./ABST_${{env.VER}}.7z
          asset_name: ABST_${{env.VER}}.7z
          
        
  # build:
  #   name: Upload Release Asset
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2
  #     - name: version #add env var # This would actually build your project, using zip for an example artifact
  #       run: |
  #         cat .github/ver.env >> $GITHUB_ENV
        
  #       id: version
  #     - name: Build project # This would actually build your project, using zip for an example artifact
  #       run: |
  #         echo $VER
  #         touch myfile.txt
  #         echo "test" > myfile.txt
  #         mkdir test
  #         zip my-artifact_${VER}.zip README.md myfile.txt test
  #     - name: list shit 
  #       run: |
  #         ls
  #         echo "---------------"
  #         echo "${VER}"
  #     - name: Create Release
  #       id: create_release
  #       uses: actions/create-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         tag_name: ${{env.VER}}
  #         release_name: Release ${{env.VER}}
  #         draft: false
  #         prerelease: false
  #     - name: Upload Release Asset
  #       id: upload-release-asset 
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
  #         asset_path: ./my-artifact_${{env.VER}}.zip
  #         asset_name: my-artifact_${{env.VER}}.zip
  #         asset_content_type: application/zip
